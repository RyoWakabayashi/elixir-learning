# 基本

## 数値演算

通常の四則演算

```elixir
1 + 2
```

```elixir
5 - 3
```

```elixir
10 * 5
```

```elixir
7 / 3
```

整数で商と余りを計算する場合

```elixir
div(7, 3)
```

```elixir
rem(7, 3)
```

## 文字列

ダブルクォーテーションで囲むと String

```elixir
"Hello"
```

シングルクォーテーションで囲むと Character List

```elixir
'Hello'
```

Character List は文字コードの配列

```elixir
'Hello'
|> Enum.map(&IO.inspect(&1))
```

String と Character List は異なる

```elixir
'Hello' == "Hello"
```

## atom型

変数名 = 値 になっている

```elixir
:foo
```

```elixir
:foo == :foo
```

```elixir
:foo == :bar
```

is_atom で atom 型かどうか確認できる

```elixir
is_atom(:foo)
```

boolean は atom 型になっている

```elixir
is_atom(true)
```

## 変数

Elixir では変数に値を「代入」（アサイン）しない

変数を指定したパターンにマッチするよう「束縛」（バインド）する

<!-- livebook:{"break_markdown":true} -->

`=` で変数を束縛する

```elixir
a = 1
```

束縛された変数はそのパターンを返す

```elixir
a
```

`=` はパターンにマッチしているかを判定する

```elixir
1 = a
```

マッチしない場合、 MatchError が発生する

```elixir
2 = a
```

同じ変数に別のパターンを再束縛することができる

代入とは違い、同じ名前の別変数が新しく定義されている

```elixir
a = 5
```

```elixir
a
```

再束縛ではなくパターンマッチさせたい場合、ピン演算子 `^` を使う

```elixir
^a = 5
```

```elixir
^a = 7
```

```elixir
a
```

比較演算子で比較できる

```elixir
a = 1
b = 2

a == b
```

```elixir
a < b
```

```elixir
a + 1 == b
```

文字列の中で式展開できる

```elixir
a = "Elixir"
"Hello #{a}"
```

`<>` で文字列を結合できる

```elixir
"Hello" <> " " <> a
```

## 不変（イミュータブル）

Elixir などの開発言語は全ての変数が不変（イミュータブル）になっている

<!-- livebook:{"break_markdown":true} -->

変更可能（ミュータブル）だと、、、

```python
a = [1, 2, 3]
do_something(a)
a == [1, 2, 3] # 保証できない
```

do_something の中で a に対して破壊的な変更（要素の削除、ソートなど）が加えられたとき、

呼び出し元からはそのことが予測できない

<!-- livebook:{"break_markdown":true} -->

不変（イミュータブル）だと、、、

<!-- livebook:{"force_markdown":true} -->

```elixir
a = [1, 2, 3]
b = do_something(a)
a == [1, 2, 3] # 保証できる
```

do_something で何をしようと、 a は変更できない

呼び出し先で更新されてしまうことによるバグが防げる

<!-- livebook:{"break_markdown":true} -->

また、ミュータブルよりもイミュータブルの方がメモリ効率が良いケースが多い
