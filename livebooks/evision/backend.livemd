# Evision.Backend

```elixir
Mix.install([
  {:benchee, "~> 1.1"},
  {:nx, "~> 0.5"},
  {:exla, "~> 0.5"},
  {:torchx, "~> 0.5"},
  {:evision, "~> 0.1.30"},
  {:kino, "~> 0.9"}
])
```

## 各バックエンドでの加算

```elixir
tensor = Nx.tensor([1, 2, 3], type: :f64, backend: {Nx.BinaryBackend, device: :cpu})
Nx.add(tensor, tensor)
```

```elixir
tensor = Nx.tensor([1, 2, 3], type: :f64, backend: {EXLA.Backend, device: :cpu})
Nx.add(tensor, tensor)
```

```elixir
tensor = Nx.tensor([1, 2, 3], type: :f64, backend: {Torchx.Backend, device: :cpu})
Nx.add(tensor, tensor)
```

```elixir
tensor = Nx.tensor([1, 2, 3], type: :f64, backend: {Evision.Backend, device: :cpu})
Nx.add(tensor, tensor)
```

## ベンチマーク

```elixir
bench = fn backend ->
  tensor =
    {200, 200}
    |> Nx.iota(type: :f64, backend: {backend, device: :cpu})

  Nx.add(tensor, tensor)
end
```

```elixir
bench.(Nx.BinaryBackend)
```

```elixir
bench.(Evision.Backend)
```

```elixir
Benchee.run(%{
  "binary" => fn -> bench.(Nx.BinaryBackend) end,
  "exla" => fn -> bench.(EXLA.Backend) end,
  "torchx" => fn -> bench.(Torchx.Backend) end,
  "evision" => fn -> bench.(Evision.Backend) end
})
```
