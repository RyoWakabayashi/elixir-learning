# Advent of Code 2023 Day 13 Part 1

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"},
  {:nx, "~> 0.9.2"}
])
```

## Get Inputs

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiIxMyIsInNlc3Npb25fc2VjcmV0IjoiU0VTU0lPTiIsInllYXIiOiIyMDIzIn0","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "13", System.fetch_env!("LB_SESSION"))
```

## My answer

```elixir
block =
  Nx.tensor([
    [1, 0, 0, 0, 0, 1, 0],
    [1, 0, 0, 0, 0, 1, 1],
    [0, 1, 1, 1, 1, 0, 0],
    [0, 1, 1, 1, 1, 0, 0],
    [1, 0, 0, 0, 0, 1, 1],
    [1, 0, 1, 1, 0, 1, 0],
    [0, 1, 1, 1, 1, 0, 1]
  ])
```

```elixir
{num_rows, num_cols} = Nx.shape(block)
```

```elixir
0..(num_rows - 2)
|> Enum.map(fn row_index ->
  range = min(row_index + 1, num_rows - row_index - 1)

  {
    Nx.slice_along_axis(block, row_index - range + 1, range, axis: 0),
    Nx.slice_along_axis(block, row_index + 1, range, axis: 0) |> Nx.reverse(axes: [0])
  }
end)
```

```elixir
0..(num_rows - 2)
|> Enum.find(fn row_index ->
  range = min(row_index + 1, num_rows - row_index - 1)

  Nx.equal(
    Nx.slice_along_axis(block, row_index - range + 1, range, axis: 0),
    Nx.slice_along_axis(block, row_index + 1, range, axis: 0) |> Nx.reverse(axes: [0])
  )
  |> Nx.all()
  |> Nx.to_number()
  |> Kernel.==(1)
end)
```

```elixir
0..(num_cols - 2)
|> Enum.find(fn col_index ->
  range = min(col_index + 1, num_cols - col_index - 1)

  Nx.equal(
    Nx.slice_along_axis(block, col_index - range + 1, range, axis: 1),
    Nx.slice_along_axis(block, col_index + 1, range, axis: 1) |> Nx.reverse(axes: [1])
  )
  |> Nx.all()
  |> Nx.to_number()
  |> Kernel.==(1)
end)
```

```elixir
0..1
|> Enum.map(fn axis ->
  num = Nx.shape(block) |> elem(axis)

  0..(num - 2)
  |> Enum.find(fn index ->
    range = min(index + 1, num - index - 1)

    Nx.equal(
      Nx.slice_along_axis(block, index - range + 1, range, axis: axis),
      Nx.slice_along_axis(block, index + 1, range, axis: axis) |> Nx.reverse(axes: [axis])
    )
    |> Nx.all()
    |> Nx.to_number()
    |> Kernel.==(1)
  end)
end)
```

```elixir
blocks =
  puzzle_input
  |> String.split("\n\n")
  |> Enum.map(fn block ->
    block
    |> String.split("\n")
    |> Enum.map(fn row ->
      String.codepoints(row)
      |> Enum.map(fn tile -> if tile == "#", do: 1, else: 0 end)
    end)
    |> Nx.tensor()
  end)
```

```elixir
blocks
|> Enum.map(fn block ->
  0..1
  |> Enum.map(fn axis ->
    num = Nx.shape(block) |> elem(axis)

    0..(num - 2)
    |> Enum.find(fn index ->
      range = min(index + 1, num - index - 1)

      Nx.equal(
        Nx.slice_along_axis(block, index - range + 1, range, axis: axis),
        Nx.slice_along_axis(block, index + 1, range, axis: axis) |> Nx.reverse(axes: [axis])
      )
      |> Nx.all()
      |> Nx.to_number()
      |> Kernel.==(1)
    end)
    |> then(fn index -> if is_nil(index), do: 0, else: index + 1 end)
    |> then(fn num -> if axis == 0, do: num * 100, else: num end)
  end)
  |> Enum.sum()
end)
|> Enum.sum()
```

<!-- livebook:{"offset":3187,"stamp":{"token":"XCP.U0WopdFi9bxzQ47LVcqNRVx84ZjeblhIaAYzvkp8au_4_sy5fb7O1ZKR8wkZvKKGA6hT8sHt7x3RHAwguFPS-mY9lcblzGEqzaWzWdML4jr9kA","version":2}} -->
