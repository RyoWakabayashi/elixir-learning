# Advent of Code 2015 Day 17 Part 2

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Get Inputs

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiIxNyIsInNlc3Npb25fc2VjcmV0IjoiU0VTU0lPTiIsInllYXIiOiIyMDE1In0","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2015", "17", System.fetch_env!("LB_SESSION"))
```

## My answer

```elixir
containers =
  puzzle_input
  |> String.split("\n")
  |> Enum.map(&String.to_integer(&1))
  |> Enum.sort(:desc)
```

```elixir
defmodule Combinations do
  def all(_, 0), do: [[]]
  def all([], _), do: []
  def all(list, n) when length(list) == n, do: [list]

  def all([head | tail], n) do
    with_head = for combo <- all(tail, n - 1), do: [head | combo]
    without_head = all(tail, n)
    with_head ++ without_head
  end
end
```

```elixir
1..20
|> Enum.reduce_while(nil, fn length, _acc ->
  num =
    containers
    |> Combinations.all(length)
    |> Enum.count(fn combination -> Enum.sum(combination) == 150 end)

  if num > 0 do
    {:halt, num}
  else
    {:cont, nil}
  end
end)
```
