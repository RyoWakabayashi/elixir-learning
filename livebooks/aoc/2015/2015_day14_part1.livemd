# Advent of Code 2015 Day 14 Part 1

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Get Inputs

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiIxNCIsInNlc3Npb25fc2VjcmV0IjoiU0VTU0lPTiIsInllYXIiOiIyMDE1In0","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2015", "14", System.fetch_env!("LB_SESSION"))
```

## My answer

```elixir
Regex.named_captures(
  ~r/(?<reindeer>[a-zA-Z]+) can fly (?<speed>\d+) km\/s for (?<keep>\d+) seconds, but then must rest for (?<rest>\d+)/,
  "Comet can fly 14 km/s for 10 seconds, but then must rest for 127 seconds."
)
```

```elixir
reindeer_list =
  puzzle_input
  |> String.split("\n")
  |> Enum.map(fn row ->
    Regex.named_captures(
      ~r/(?<reindeer>[a-zA-Z]+) can fly (?<speed>\d+) km\/s for (?<keep>\d+) seconds, but then must rest for (?<rest>\d+)/,
      row
    )
    |> then(fn %{"speed" => speed, "keep" => keep, "rest" => rest} ->
      %{
        speed: String.to_integer(speed),
        keep: String.to_integer(keep),
        rest: String.to_integer(rest),
        distance: 0
      }
    end)
  end)
```

```elixir
1..2503
|> Enum.reduce(reindeer_list, fn sec, acc_reindeer_list ->
  acc_reindeer_list
  |> Enum.map(fn reindeer ->
    remain = rem(sec, reindeer.keep + reindeer.rest)
    if remain > 0 and remain <= reindeer.keep do
      Map.put(reindeer, :distance, reindeer.distance + reindeer.speed)
    else
      reindeer
    end
  end)
end)
|> Enum.map(&(&1.distance))
|> Enum.max()
```
