# Advent of Code 2015 Day 19 Part 1

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Get Inputs

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiIxOSIsInNlc3Npb25fc2VjcmV0IjoiU0VTU0lPTiIsInllYXIiOiIyMDE1In0","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2015", "19", System.fetch_env!("LB_SESSION"))
```

## My answer

```elixir
molecules = "HOH"
replacements = [{"H", "HO"}, {"H", "OH"}, {"O", "HH"}]
```

```elixir
replacements
|> Enum.map(fn {src, dst} ->
  0..(String.length(molecules) - 1)
  |> Enum.map(fn index ->
    replaced =
      molecules
      |> String.slice(index, String.length(molecules) - index)
      |> String.replace(src, dst, global: false)
    
    String.slice(molecules, 0, index) <> replaced
  end)
  |> Enum.filter(&(&1 != molecules))
  |> Enum.uniq()
end)
|> Enum.concat()
|> Enum.uniq()
```

```elixir
rows = String.split(puzzle_input, "\n")
```

```elixir
[molecules | replacements] = Enum.reverse(rows)

replacements =
  replacements
  |> Enum.filter(&(&1 != ""))
  |> Enum.map(fn row ->
    [src, dst] = String.split(row, " => ")
    {src, dst}
  end)

{molecules, replacements}
```

```elixir
replacements
|> Enum.map(fn {src, dst} ->
  0..(String.length(molecules) - 1)
  |> Enum.map(fn index ->
    replaced =
      molecules
      |> String.slice(index, String.length(molecules) - index)
      |> String.replace(src, dst, global: false)
    
    String.slice(molecules, 0, index) <> replaced
  end)
  |> Enum.filter(&(&1 != molecules))
  |> Enum.uniq()
end)
|> Enum.concat()
|> Enum.uniq()
|> length()
```

<!-- livebook:{"offset":1675,"stamp":{"token":"XCP.7bgzIyEAhNbHac5NREH6G6HlTxFbhiWEzBJ6YdPnJLElTogQDjIeN1qAgZKR2tXb4F-vYyQXYjGtTdzEsYMK4MAo2okuINlY3KRCbnWJs43fWg","version":2}} -->
