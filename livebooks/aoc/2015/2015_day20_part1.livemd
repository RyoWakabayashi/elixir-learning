# Advent of Code 2015 Day 20 Part 1

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Get Inputs

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiIyMCIsInNlc3Npb25fc2VjcmV0IjoiU0VTU0lPTiIsInllYXIiOiIyMDE1In0","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2015", "20", System.fetch_env!("LB_SESSION"))
```

## My answer

```elixir
1..9
|> Enum.map(fn house_number ->
  1..house_number
  |> Enum.filter(fn x ->
    rem(house_number, x) == 0
  end)
end)
```

```elixir
1..9
|> Enum.map(fn house_number ->
  limit = :math.sqrt(house_number) |> floor()

  1..limit
  |> Enum.filter(fn x ->
    rem(house_number, x) == 0
  end)
  |> Enum.flat_map(fn x ->
    [x, div(house_number, x)]
  end)
  |> Enum.uniq()
  |> Enum.sort()
end)
```

```elixir
target_number = String.to_integer(puzzle_input)
```

```elixir
1..1000000
|> Enum.find(fn house_number ->
  limit = house_number |> :math.sqrt() |> floor()

  1..limit
  |> Enum.filter(fn x ->
    rem(house_number, x) == 0
  end)
  |> Enum.flat_map(fn x ->
    [x, div(house_number, x)]
  end)
  |> Enum.uniq()
  |> Enum.map(fn num -> num * 10 end)
  |> Enum.sum()
  |> Kernel.>=(target_number)
end)
```

<!-- livebook:{"offset":1141,"stamp":{"token":"XCP.kzXjj3MleUwpUE4MjZAuMGk6EZ7ElM4z9JL2OzH_CRVuUDX4GVQyZeW4L_7zsGMJcndv84Yhit78z6ifBlRu2uMhyAVv8XuZyCurlpJElybkFA","version":2}} -->
