# Advent of Code 2024 Day 4 Part 1

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Get Inputs

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiI0Iiwic2Vzc2lvbl9zZWNyZXQiOiJTRVNTSU9OIiwieWVhciI6IjIwMjQifQ","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2024", "4", System.fetch_env!("LB_SESSION"))
```

## My answer

```elixir
input =
  """
  MMMSXXMASM
  MSAMXMSMSA
  AMXSXMAAMM
  MSAMASMSMX
  XMASAMXAMM
  XXAMMXXAMA
  SMSMSASXSS
  SAXAMASAAA
  MAMMMXMMMM
  MXMXAXMASX
  """
```

```elixir
Regex.scan(~r/XMAS/, input)
```

```elixir
Regex.scan(~r/SAMX/, input)
```

```elixir
turned_input =
  input
  |> String.trim()
  |> String.split("\n")
  |> Enum.map(&String.codepoints(&1))
  |> Enum.zip()
  |> Enum.map(fn col -> col |> Tuple.to_list() |> Enum.join() end)
  |> Enum.join("\n")

IO.puts(turned_input)
```

```elixir
Regex.scan(~r/XMAS/, turned_input)
```

```elixir
Regex.scan(~r/SAMX/, turned_input)
```

```elixir
turned_input =
  input
  |> String.trim()
  |> String.split("\n")
  |> Enum.with_index()
  |> Enum.map(fn {row, index} ->
    String.duplicate(".", index) <> row <> String.duplicate(".", String.length(row) - index - 1)
  end)
  |> Enum.join("\n")

IO.puts(turned_input)
```

```elixir
turned_input =
  input
  |> String.trim()
  |> String.split("\n")
  |> Enum.with_index()
  |> Enum.map(fn {row, index} ->
    String.duplicate(".", index) <> row <> String.duplicate(".", String.length(row) - index - 1)
  end)
  |> Enum.map(&String.codepoints(&1))
  |> Enum.zip()
  |> Enum.map(fn col -> col |> Tuple.to_list() |> Enum.join() end)
  |> Enum.join("\n")

IO.puts(turned_input)
```

```elixir
Regex.scan(~r/XMAS/, turned_input)
```

```elixir
Regex.scan(~r/SAMX/, turned_input)
```

```elixir
search_xmas = fn input ->
  IO.puts("")
  IO.puts(input)
  Enum.sum([
    Regex.scan(~r/XMAS/, input) |> length(),
    Regex.scan(~r/SAMX/, input) |> length()
  ])
end
```

```elixir
search_xmas.(input)
```

```elixir
search_all_xmas = fn input ->
  Enum.sum([
    input
    |> String.trim()
    |> search_xmas.(),
    input
    |> String.trim()
    |> String.split("\n")
    |> Enum.map(&String.codepoints(&1))
    |> Enum.zip()
    |> Enum.map(fn col -> col |> Tuple.to_list() |> Enum.join() end)
    |> Enum.join("\n")
    |> search_xmas.(),
    input
    |> String.trim()
    |> String.split("\n")
    |> Enum.with_index()
    |> Enum.map(fn {row, index} ->
      String.duplicate(".", index) <> row <> String.duplicate(".", String.length(row) - index - 1)
    end)
    |> Enum.map(&String.codepoints(&1))
    |> Enum.zip()
    |> Enum.map(fn col -> col |> Tuple.to_list() |> Enum.join() end)
    |> Enum.join("\n")
    |> search_xmas.(),
    input
    |> String.trim()
    |> String.split("\n")
    |> Enum.with_index()
    |> Enum.map(fn {row, index} ->
      String.duplicate(".", String.length(row) - index - 1) <> row <> String.duplicate(".", index)
    end)
    |> Enum.map(&String.codepoints(&1))
    |> Enum.zip()
    |> Enum.map(fn col -> col |> Tuple.to_list() |> Enum.join() end)
    |> Enum.join("\n")
    |> search_xmas.()
  ])
end
```

```elixir
search_all_xmas.(input)
```

```elixir
search_all_xmas.(puzzle_input)
```
