# AxonOnnx ResNet

```elixir
Mix.install([
  {:exla, "~> 0.2"},
  {:axon_onnx, "~> 0.1"},
  {:stb_image, "~> 0.5"},
  {:download, "~> 0.0"},
  {:jason, "~> 1.3"},
  {:kino, "~> 0.6"}
])
```

## Set EXLA as Nx backend

```elixir
EXLA.set_as_nx_default([:tpu, :cuda, :rocm, :host])
```

## Helper

```elixir
defmodule Helper do
  def download!(url, save_as) do
    unless File.exists?(save_as) do
      Download.from(url, path: save_as)
    end

    save_as
  end

  def show_image(image_path) do
    image_path
    |> File.read!()
    |> Kino.Image.new(:jpeg)
  end
end
```

## Download models

```elixir
classes_path = "/data/classes.json"

classes =
  "https://s3.amazonaws.com/deep-learning-models/image-models/imagenet_class_index.json"
  |> Helper.download!(classes_path)
  |> File.read!()
  |> Jason.decode!()
```

```elixir
model_path = "/data/resnet.onnx"

{model, params} =
  "https://media.githubusercontent.com/media/onnx/models/main/vision/classification/resnet/model/resnet18-v1-7.onnx"
  |> Helper.download!(model_path)
  |> AxonOnnx.import()
```

```elixir
image_path = "/data/shark.jpg"

image_tensor =
  "https://www.collinsdictionary.com/images/full/greatwhiteshark_157273892.jpg"
  |> Helper.download!(image_path)
  |> File.read!()
  |> StbImage.read_binary!()
  |> StbImage.resize(224, 224)
  |> StbImage.to_nx()

Helper.show_image(image_path)
```

```elixir
nx_channels =
  image_tensor
  |> Nx.axis_size(2)
```

```elixir
image_tensor =
  case nx_channels do
    3 -> image_tensor
    4 -> Nx.slice(image_tensor, [0, 0, 0], [224, 224, 3])
  end
  |> Nx.divide(255)
  |> Nx.subtract(Nx.tensor([0.485, 0.456, 0.406]))
  |> Nx.divide(Nx.tensor([0.229, 0.224, 0.225]))
  |> Nx.transpose()
  |> Nx.new_axis(0)
```

```elixir
model
|> Axon.predict(params, image_tensor)
|> Nx.flatten()
|> Nx.argsort()
|> Nx.reverse()
|> Nx.slice([0], [5])
|> Nx.to_flat_list()
|> Enum.with_index()
|> Enum.map(fn {no, index} -> {index, Map.get(classes, to_string(no))} end)
```
