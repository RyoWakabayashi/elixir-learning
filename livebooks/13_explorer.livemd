# Explorer

```elixir
Mix.install([
  {:explorer, "~> 0.2.0"}
])
```

## Section

```elixir
alias Explorer.DataFrame
alias Explorer.Series
```

```elixir
population_df = DataFrame.from_csv!("/home/livebook/population_20211001.csv")
```

```elixir
DataFrame.table(population_df)
```

```elixir
DataFrame.table(population_df, limit: :infinity)
```

```elixir
population_df
|> DataFrame.distinct(columns: ["年齢層"])
|> DataFrame.to_columns()
|> Map.get("年齢層")
```

```elixir
population_df
|> DataFrame.filter(&Series.equal(&1["都道府県"], "東京都"))
|> DataFrame.select(["年齢層", "性別", "人口（千人）"])
|> DataFrame.table(limit: :infinity)
```

```elixir
population_df
|> DataFrame.mutate("人口（千人）": &Series.cast(&1["人口（千人）"], :float))
|> DataFrame.filter(&Series.equal(&1["都道府県"], "東京都"))
|> DataFrame.select(["年齢層", "性別", "人口（千人）"])
|> DataFrame.table(limit: :infinity)
```

```elixir
trim_comma = fn input ->
  String.replace(input, ",", "")
end

population_df
|> DataFrame.mutate("人口（千人）": &Series.transform(&1["人口（千人）"], trim_comma))
|> DataFrame.mutate("人口（千人）": &Series.cast(&1["人口（千人）"], :float))
|> DataFrame.filter(&Series.equal(&1["都道府県"], "東京都"))
|> DataFrame.select(["年齢層", "性別", "人口（千人）"])
|> DataFrame.table(limit: :infinity)
```

```elixir
population_df =
  population_df
  |> DataFrame.mutate("人口（千人）": &Series.transform(&1["人口（千人）"], trim_comma))
  |> DataFrame.mutate("人口（千人）": &Series.cast(&1["人口（千人）"], :float))
  |> DataFrame.mutate("人口（千人）": &Series.multiply(&1["人口（千人）"], 1000))
  |> DataFrame.mutate("人口（千人）": &Series.cast(&1["人口（千人）"], :integer))
  |> DataFrame.rename("人口（千人）": "人口")

population_df
|> DataFrame.filter(&Series.equal(&1["都道府県"], "東京都"))
|> DataFrame.select(["年齢層", "性別", "人口"])
|> DataFrame.table(limit: :infinity)
```

```elixir
population_df
|> DataFrame.filter(&Series.equal(&1["年齢層"], "15歳未満"))
|> DataFrame.filter(&Series.equal(&1["性別"], "男性"))
|> DataFrame.filter(&Series.greater(&1["人口"], 300_000))
|> DataFrame.select(["都道府県", "人口"])
|> DataFrame.arrange(desc: "人口")
|> DataFrame.table(limit: 10)
```

```elixir
population_df
|> DataFrame.mutate(人口: &Series.cast(&1["人口"], :integer))
|> DataFrame.pivot_wider("年齢層", "人口")
|> DataFrame.table(limit: :infinity)
```

```elixir
sum_df =
  population_df
  |> DataFrame.group_by(["都道府県"])
  |> DataFrame.summarise(人口: [:sum])
  |> DataFrame.rename(人口_sum: "人口")
  |> DataFrame.mutate(人口: &Series.cast(&1["人口"], :float))

sum_df
|> DataFrame.arrange(desc: "人口")
|> DataFrame.table(limit: :infinity)
```

```elixir
sex_ratio_df =
  population_df
  |> DataFrame.group_by(["都道府県", "性別"])
  |> DataFrame.summarise(人口: [:sum])
  |> DataFrame.rename(人口_sum: "人口")
  |> DataFrame.mutate(人口: &Series.cast(&1["人口"], :float))
  |> DataFrame.pivot_wider("性別", "人口")
  |> DataFrame.mutate(合計: &Series.add(&1["男性"], &1["女性"]))
  |> DataFrame.mutate(男性率: &Series.divide(&1["男性"], &1["合計"]))
  |> DataFrame.mutate(女性率: &Series.divide(&1["女性"], &1["合計"]))
  |> DataFrame.select(["都道府県", "男性率", "女性率"])

sex_ratio_df
|> DataFrame.arrange(desc: "男性率")
|> DataFrame.table(limit: :infinity)
```

```elixir
elderly_rate_df =
  population_df
  |> DataFrame.group_by(["都道府県", "年齢層"])
  |> DataFrame.summarise(人口: [:sum])
  |> DataFrame.rename(人口_sum: "人口")
  |> DataFrame.mutate(人口: &Series.cast(&1["人口"], :float))
  |> DataFrame.pivot_wider("年齢層", "人口")
  |> DataFrame.mutate(合計: &Series.add(&1["15歳未満"], &1["15～64歳"]))
  |> DataFrame.mutate(合計: &Series.add(&1["合計"], &1["65歳以上"]))
  |> DataFrame.mutate(高齢者率: &Series.divide(&1["65歳以上"], &1["合計"]))
  |> DataFrame.select(["都道府県", "高齢者率"])

elderly_rate_df
|> DataFrame.arrange(desc: "高齢者率")
|> DataFrame.table(limit: :infinity)
```

```elixir
assets_df = DataFrame.from_csv!("/home/livebook/assets_20151216.csv")
```

```elixir
DataFrame.table(assets_df)
```

```elixir
parse_float = fn df, col ->
  df
  |> DataFrame.mutate(%{col => &Series.transform(&1[col], trim_comma)})
  |> DataFrame.mutate(%{col => &Series.cast(&1[col], :float)})
end

assets_df =
  assets_df
  |> parse_float.("年間収入")
  |> parse_float.("貯蓄現在高")
  |> parse_float.("負債現在高")

assets_df
|> DataFrame.table(limit: :infinity)
```

```elixir
joined_df =
  sum_df
  |> DataFrame.join(sex_ratio_df, how: :left)
  |> DataFrame.join(elderly_rate_df, how: :left)
  |> DataFrame.join(assets_df, how: :left)

joined_df
|> DataFrame.table(limit: :infinity)
```

```elixir
DataFrame.to_csv(joined_df, "/tmp/joined.csv")
```

```elixir
joined_df
|> DataFrame.arrange(desc: "高齢者率")
|> DataFrame.table(limit: 10)
```

```elixir
cols = ["人口", "男性率", "女性率", "高齢者率", "世帯人員", "持ち家率", "年間収入", "貯蓄現在高"]
```

```elixir
std_map =
  joined_df
  |> DataFrame.select(cols)
  |> DataFrame.to_series()
  |> Enum.map(fn {key, value} -> {key, Series.std(value)} end)
  |> Enum.into(%{})
```

```elixir
get_mul = fn df, col_1, col_2 ->
  DataFrame.mutate(df, %{(col_1 <> "*" <> col_2) => &Series.multiply(&1[col_1], &1[col_2])})
end

covariance_df =
  cols
  |> Enum.reduce(joined_df, fn col_1, sub_df_1 ->
    cols
    |> Enum.reduce(sub_df_1, fn col_2, sub_df_2 ->
      get_mul.(sub_df_2, col_1, col_2)
    end)
  end)
```

```elixir
mean_map =
  covariance_df
  |> DataFrame.select(["都道府県"], :drop)
  |> DataFrame.to_series()
  |> Enum.map(fn {key, value} -> {key, Series.mean(value)} end)
  |> Enum.into(%{})
```

```elixir
get_covariance = fn col_1, col_2 ->
  Map.get(mean_map, col_1 <> "*" <> col_2) - Map.get(mean_map, col_1) * Map.get(mean_map, col_2)
end

covariance_map =
  cols
  |> Enum.map(fn col_1 ->
    cols
    |> Enum.map(fn col_2 ->
      {col_1 <> "*" <> col_2, get_covariance.(col_1, col_2)}
    end)
    |> Enum.into(%{})
  end)
  |> Enum.reduce(fn map, merged_map ->
    Map.merge(merged_map, map)
  end)
```

```elixir
get_correlation = fn col_1, col_2 ->
  cond do
    col_1 == col_2 ->
      1

    true ->
      Map.get(covariance_map, col_1 <> "*" <> col_2) /
        (Map.get(std_map, col_1) * Map.get(std_map, col_2))
  end
end

correlation_map =
  cols
  |> Enum.map(fn col_1 ->
    cols
    |> Enum.map(fn col_2 ->
      {col_1 <> "*" <> col_2, get_correlation.(col_1, col_2)}
    end)
    |> Enum.into(%{})
  end)
  |> Enum.reduce(fn map, merged_map ->
    Map.merge(merged_map, map)
  end)
```

```elixir
cols
|> Enum.map(fn col_1 ->
  %{
    col_1 =>
      cols
      |> Enum.map(fn col_2 ->
        Map.get(covariance_map, col_1 <> "*" <> col_2)
      end)
  }
end)
|> Enum.reduce(fn map, merged_map ->
  Map.merge(merged_map, map)
end)
|> Map.merge(%{"x" => cols})
|> DataFrame.new()
|> DataFrame.select(["x" | cols])
|> DataFrame.table()
```

```elixir
cols
|> Enum.map(fn col_1 ->
  %{
    col_1 =>
      cols
      |> Enum.map(fn col_2 ->
        Map.get(correlation_map, col_1 <> "*" <> col_2)
      end)
  }
end)
|> Enum.reduce(fn map, merged_map ->
  Map.merge(merged_map, map)
end)
|> Map.merge(%{"x" => cols})
|> DataFrame.new()
|> DataFrame.select(["x" | cols])
|> DataFrame.table()
```
