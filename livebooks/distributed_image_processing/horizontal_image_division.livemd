# 画像分割

```elixir
Mix.install([
  {:download, "~> 0.0.4"},
  {:evision, "~> 0.1"},
  {:kino, "~> 0.7"},
  {:nx, "~> 0.4"}
])
```

## 画像ダウンロード

```elixir
# 再実行時、Download.from()でeexistエラーになるのを防止
File.rm("Lenna_%28test_image%29.png")

lenna =
  Download.from("https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png")
  |> elem(1)
```

```elixir
mat = Evision.imread(lenna)
```

## 画像分割

```elixir
# 分割サイズ
div_size = 64
```

```elixir
div_img =
  mat
  |> Evision.Mat.to_nx()
  |> Nx.to_batched(div_size)
  |> Enum.map(&Evision.Mat.from_nx_2d(&1))
  |> Enum.map(&Kino.render(&1))
```

```elixir
# 分割したファイルを保存
dst_file_ext = Path.extname(lenna)
dst_file_basename = Path.basename(lenna, dst_file_ext)

dst_files =
  Stream.unfold(0, fn counter -> {counter, counter + 1} end)
  |> Stream.map(&"#{dst_file_basename}_#{&1}#{dst_file_ext}")

dst_file_paths =
  div_img
  |> Enum.zip(dst_files)
  |> Enum.map(fn {img, dst_file} ->
    Evision.imwrite(dst_file, img)
    dst_file
  end)
```

```elixir
# 分割して保存したファイルを読込
dst_file_paths
|> Enum.map(&Evision.imread(&1))
|> Enum.map(&Kino.render(&1))
```

## 画像結合

```elixir
shape = mat.shape

dst_file_paths
|> Enum.map(&Evision.imread(&1))
|> Enum.map(&Evision.Mat.to_nx(&1, Nx.BinaryBackend))
# 結合
|> Nx.concatenate()
# トリミング
|> Nx.slice([0, 0, 0], Tuple.to_list(shape))
|> then(&Evision.Mat.from_nx_2d(&1))
|> dbg()
```
